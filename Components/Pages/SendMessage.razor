@page "/message"
@using IBM.WMQ

@rendermode InteractiveServer

<PageTitle>DemoApp</PageTitle>

<FluentStack Style="padding-top:1em;padding-bottom:1em" Orientation="Orientation.Horizontal">
    <FluentIcon Title="Welcome" Value="@(new Icons.Regular.Size32.Mail())"></FluentIcon>
    <FluentLabel Typo="Typography.H3">Send a message to queue</FluentLabel>
</FluentStack>

<FluentStack Style="padding-top:1em; padding-bottom:1em" Orientation="Orientation.Vertical">
    <FluentSelect TOption="string" Label="Select queue name"
                  Width="200px" Placeholder="Select queue name" Items="queueNames" @bind-Value="selectedQueue" />
    <FluentTextArea Rows="3" Cols="80" Label="@payloadLabel" @bind-Value="@Message">
    </FluentTextArea>
</FluentStack>

<FluentButton IconStart="@(new Icons.Regular.Size24.DocumentSync())" Disabled="@(selectedQueue.Length == 0)" Appearance="Appearance.Accent" @onclick="GetRandomData">Get random data</FluentButton>
<FluentButton IconStart="@(new Icons.Regular.Size24.Send())" Disabled="@(Message.Length == 0)" Appearance="Appearance.Accent" @onclick="SendMessageToMQ">Send message</FluentButton>

@code {
    [Inject]
    private ILogger<SendMessage> logger { get; set; } = default!;

    [Inject]
    private IFakeDataService fakeDataService { get; set; } = default!;

    [Inject]
    private IConfiguration configuration { get; set; } = default!;

    private string hostname = string.Empty;
    private string channel = string.Empty;
    private string queueManager = string.Empty;
    //private string queueName = string.Empty;
    private int port;

    private Hashtable connectionProperties = new Hashtable();
    private string Message { get; set; } = string.Empty;
    private string payloadLabel = "Payload";

    private string[] queueNames = ["TRANSFER", "CUSTOMER"];
    private string selectedQueue { get; set; } = "CUSTOMER";

    protected override void OnInitialized()
    {
        hostname = configuration["IbmMq:Hostname"]!;
        channel = configuration["IbmMq:Channel"]!;
        queueManager = configuration["IbmMq:QueueManager"]!;
        //queueName = configuration["IbmMq:QueueName"]!;
        port = int.Parse(configuration["IbmMq:Port"]!);
        connectionProperties.Add(MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_MANAGED);
        connectionProperties.Add(MQC.HOST_NAME_PROPERTY, hostname);
        connectionProperties.Add(MQC.CHANNEL_PROPERTY, channel);
        connectionProperties.Add(MQC.PORT_PROPERTY, port);
    }


    private void GetRandomData()
    {
        if (selectedQueue == "CUSTOMER")
        {
            Message = fakeDataService.GetFakeCustomerData();
            payloadLabel = "Payload";
        }
        else
        {
            Message = fakeDataService.GetFakeTransferData();
            payloadLabel = "Payload";
        }
    }

    private void SendMessageToMQ()
    {
        try
        {
            MQQueueManager qManager = new MQQueueManager(queueManager, connectionProperties);
            int openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT;
            MQQueue queue = qManager.AccessQueue(selectedQueue, openOptions);
            MQMessage msg = new MQMessage();
            msg.CharacterSet = MQC.CODESET_UTF;
            msg.WriteString(Message);
            MQPutMessageOptions pmo = new MQPutMessageOptions();
            queue.Put(msg, pmo);
            Message = "";
            payloadLabel = "Payload sent!";
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }
}

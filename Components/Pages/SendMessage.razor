@page "/message"
@using EventStreamApp.Models
@using IBM.WMQ

@rendermode InteractiveServer

<PageTitle>DemoApp</PageTitle>

<FluentStack Style="padding-top:1em;padding-bottom:1em" Orientation="Orientation.Horizontal">
    <FluentIcon Title="Welcome" Value="@(new Icons.Regular.Size32.Mail())"></FluentIcon>
    <FluentLabel Typo="Typography.H3">Send messages to IBM MQ</FluentLabel>
</FluentStack>

<p>
    Imagine there are 2 different systems producing messages and send them to queues
</p>
<FluentStack Wrap="true" HorizontalAlignment="HorizontalAlignment.Start" Orientation="Orientation.Horizontal" Style="margin-top:1em">
    <div>
        <FluentHeader Style="margin-bottom:1em; margin-top:1em">
            System A produces CUSTOMER msg.
        </FluentHeader>
        <FluentTextArea Appearance="FluentInputAppearance.Filled" Rows="8" Cols="50"
                        Label="@payloadCstLabel" ValueChanged="UpdateCustomerMessage" Value="@customerMessage">
        </FluentTextArea>
        <FluentStack Orientation="Orientation.Horizontal" Style="padding-top:1em; padding-bottom:2em">
            <FluentButton IconStart="@(new Icons.Regular.Size24.DocumentSync())"
                          Appearance="Appearance.Accent" @onclick="@(() => GetRandomData("CUSTOMER"))">Get random data</FluentButton>
            <FluentSpacer />
            <FluentButton IconStart="@(new Icons.Regular.Size24.Send())"
                          Disabled="@(customerMessage.Length == 0 || !isCstMessageValid)"
                          Appearance="Appearance.Accent" @onclick="@(()=>SendMessageToMQ("CUSTOMER", customerMessage))">Send message</FluentButton>
        </FluentStack>
    </div>

    <FluentSpacer Width="2" />
    <div>
        <FluentHeader Style="margin-bottom:1em; margin-top:1em">
            System B produces TRANSFER msg.
        </FluentHeader>
        <FluentTextArea Appearance="FluentInputAppearance.Filled" Rows="8" Cols="50"
                        Label="@payloadTrfLabel" ValueChanged="UpdateTransferMessage" Value="@transferMessage">
        </FluentTextArea>
        <FluentStack Orientation="Orientation.Horizontal" Style="padding-top:1em; padding-bottom:2em">
            <FluentButton IconStart="@(new Icons.Regular.Size24.DocumentSync())"
                          Appearance="Appearance.Accent" @onclick="@(()=> GetRandomData("TRANSFER"))">Get random data</FluentButton>
            <FluentSpacer />
            <FluentButton IconStart="@(new Icons.Regular.Size24.Send())"
                          Disabled="@(transferMessage.Length == 0 || !isTrfMessageValid)"
                          Appearance="Appearance.Accent" @onclick="@(() => SendMessageToMQ("TRANSFER", transferMessage))">Send message</FluentButton>
        </FluentStack>
    </div>
</FluentStack>


@code {
    [Inject]
    private ILogger<SendMessage> logger { get; set; } = default!;

    [Inject]
    private IFakeDataService fakeDataService { get; set; } = default!;

    [Inject]
    private IConfiguration configuration { get; set; } = default!;

    private string hostname = string.Empty;
    private string channel = string.Empty;
    private string queueManager = string.Empty;
    private int port;

    private Hashtable connectionProperties = new Hashtable();
    private string customerMessage { get; set; } = string.Empty;
    private string transferMessage { get; set; } = string.Empty;

    private string payloadCstLabel = "Payload";
    private string payloadTrfLabel = "Payload";

    private bool isTrfMessageValid = true;
    private bool isCstMessageValid = true;

    protected override void OnInitialized()
    {
        hostname = configuration["IbmMq:Hostname"]!;
        channel = configuration["IbmMq:Channel"]!;
        queueManager = configuration["IbmMq:QueueManager"]!;
        port = int.Parse(configuration["IbmMq:Port"]!);
        connectionProperties.Add(MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_MANAGED);
        connectionProperties.Add(MQC.HOST_NAME_PROPERTY, hostname);
        connectionProperties.Add(MQC.CHANNEL_PROPERTY, channel);
        connectionProperties.Add(MQC.PORT_PROPERTY, port);
        GetRandomData("CUSTOMER");
        GetRandomData("TRANSFER");
    }


    private void GetRandomData(string dataType)
    {
        if (dataType == "CUSTOMER")
        {
            customerMessage = fakeDataService.GetFakeCustomerData();
            payloadCstLabel = "Payload";
            isCstMessageValid = true;
        }
        else
        {
            transferMessage = fakeDataService.GetFakeTransferData();
            payloadTrfLabel = "Payload";
            isTrfMessageValid = true;
        }
    }

    private void UpdateCustomerMessage(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            customerMessage = string.Empty;
            isCstMessageValid = false;
            payloadCstLabel = "Payload";
            return;
        }
        customerMessage = value;
        isCstMessageValid = IsValidJsonString(value);
        payloadCstLabel = isCstMessageValid ? "Payload" : "Invalid payload!";
    }

    private void UpdateTransferMessage(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            transferMessage = string.Empty;
            isTrfMessageValid = false;
            payloadTrfLabel = "Payload";
            return;
        }
        transferMessage = value;
        isTrfMessageValid = IsValidJsonString(value);
        payloadTrfLabel = isTrfMessageValid ? "Payload" : "Invalid payload!";
    }

    private void SendMessageToMQ(string queueName, string messageToSend)
    {
        try
        {
            MQQueueManager qManager = new MQQueueManager(queueManager, connectionProperties);
            int openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT;
            MQQueue queue = qManager.AccessQueue(queueName, openOptions);
            MQMessage msg = new MQMessage();
            msg.CharacterSet = MQC.CODESET_UTF;
            msg.WriteString(messageToSend);
            MQPutMessageOptions pmo = new MQPutMessageOptions();
            queue.Put(msg, pmo);
            if (queueName == "CUSTOMER")
            {
                customerMessage = string.Empty;
                payloadCstLabel = "Payload sent!";
            }
            else
            {
                transferMessage = string.Empty;
                payloadTrfLabel = "Payload sent!";
            }
        }
        catch (Exception ex)
        {
            if (queueName == "CUSTOMER")
            {
                payloadCstLabel = $"Error sending payload: {ex.Message}";
            }
            else
            {
                payloadTrfLabel = $"Error sending payload: {ex.Message}";
            }
            logger.LogError(ex, ex.Message);
        }
    }

    private bool IsValidJsonString(string value)
    {
        var jsonString = value.Trim();
        if ((jsonString.StartsWith("{") && jsonString.EndsWith("}")) || // For object
            (jsonString.StartsWith("[") && jsonString.EndsWith("]")))   // For array
        {
            try
            {
                var obj = JsonDocument.Parse(jsonString);
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        else
        {
            return false;
        }

    }

}

@page "/message"
@using IBM.WMQ

@rendermode InteractiveServer

<PageTitle>Send Message</PageTitle>

<h1>Send transfer message to a queue</h1>

<div role="status" style="padding-bottom: 1em;">
    <FluentTextArea Rows="5" Cols="50" Label="@payloadLabel" @bind-Value="@Message">
    </FluentTextArea>
</div>

<FluentButton Disabled="@(Message.Length != 0)" Appearance="Appearance.Accent" @onclick="GetRandomData">Get random data</FluentButton>
<FluentButton Disabled="@(Message.Length == 0)" Appearance="Appearance.Accent" @onclick="SendMessageToMQ">Send</FluentButton>

@code {
    [Inject]
    private ILogger<SendMessage> logger { get; set; } = default!;

    [Inject]
    private IFakeDataService fakeDataService { get; set; } = default!;

    [Inject]
    private IConfiguration configuration { get; set; } = default!;

    private string hostname = string.Empty;
    private string channel = string.Empty;
    private string queueManager = string.Empty;
    private string queueName = string.Empty;
    private int port;

    private Hashtable connectionProperties = new Hashtable();
    private string Message { get; set; } = string.Empty;
    private string payloadLabel = "Payload";

    protected override void OnInitialized()
    {
        hostname = configuration["IbmMq:Hostname"]!;
        channel = configuration["IbmMq:Channel"]!;
        queueManager = configuration["IbmMq:QueueManager"]!;
        queueName = configuration["IbmMq:QueueName"]!;
        port = int.Parse(configuration["IbmMq:Port"]!);
        connectionProperties.Add(MQC.TRANSPORT_PROPERTY, MQC.TRANSPORT_MQSERIES_MANAGED);
        connectionProperties.Add(MQC.HOST_NAME_PROPERTY, hostname);
        connectionProperties.Add(MQC.CHANNEL_PROPERTY, channel);
        connectionProperties.Add(MQC.PORT_PROPERTY, port);
        Message = fakeDataService.GetFakeTransferData();
    }


    private void GetRandomData()
    {
        Message = fakeDataService.GetFakeTransferData();
        payloadLabel = "Payload";
    }

    private void SendMessageToMQ()
    {
        try
        {
            MQQueueManager qManager = new MQQueueManager(queueManager, connectionProperties);
            int openOptions = MQC.MQOO_INPUT_AS_Q_DEF | MQC.MQOO_OUTPUT;
            MQQueue queue = qManager.AccessQueue(queueName, openOptions);
            MQMessage msg = new MQMessage();
            msg.CharacterSet = MQC.CODESET_UTF;
            msg.WriteString(Message);
            MQPutMessageOptions pmo = new MQPutMessageOptions();
            queue.Put(msg, pmo);
            Message = "";
            payloadLabel = "Payload sent!";
        }
        catch (Exception ex)
        {
            logger.LogError(ex, ex.Message);
        }
    }
}

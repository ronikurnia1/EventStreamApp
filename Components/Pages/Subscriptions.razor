@page "/subscriptions"
@using EventStreamApp.Models

@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>DemoApp</PageTitle>

<FluentStack Style="padding-top:1em; padding-bottom:2em" Orientation="Orientation.Horizontal">
    <FluentIcon Title="Welcome" Value="@(new Icons.Regular.Size32.Flash())"></FluentIcon>
    <FluentLabel Typo="Typography.H3">Event Subscriptions</FluentLabel>
</FluentStack>

<FluentHeader Style="background-color:ButtonFace; color:ActiveBorder">
    Topic: TRANSFER
    <FluentSpacer />
    <FluentToolbar Orientation="Orientation.Horizontal" Style="background-color:transparent">
        <FluentButton Appearance="Appearance.Accent" IconStart="@(btnLblSubsTrf.Length <= 9 ? subscribeIcon: unsubscribeIcon)" OnClick="SubscribeTrf">@btnLblSubsTrf</FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.Delete())" OnClick="ClearTrf">Clear</FluentButton>
    </FluentToolbar>
</FluentHeader>
@if (btnLblSubsTrf == "Unsubscribe")
{
    <FluentDataGrid Items="transfers" ShowHover="true" ResizableColumns="true">
        <PropertyColumn Width="20%" Property="@(t => t.BookedDate)" Title="Date" Sortable="true" />
        <PropertyColumn Width="25%" Property="@(t => t.Source)" Title="From account" Sortable="true" />
        <PropertyColumn Width="25%" Property="@(t => t.Target)" Title="To account" Sortable="true" />
        <PropertyColumn Width="10%" Property="@(t => t.Type)" Sortable="true" />
        <PropertyColumn Width="20%" Property="@(t => t.Amount)" Align="Align.End" Format="N0" Sortable="true" />
    </FluentDataGrid>
}

<FluentHeader Style="background-color:ButtonFace;color:ActiveBorder;margin-top:3em">
    Topic: CUSTOMER
    <FluentSpacer />
    <FluentToolbar Orientation="Orientation.Horizontal" Style="background-color:transparent">
        <FluentButton Appearance="Appearance.Accent" IconStart="@(btnLblSubsCst.Length <= 9 ? subscribeIcon: unsubscribeIcon)" OnClick="SubscribeCst">@btnLblSubsCst</FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.Delete())" OnClick="ClearCst">Clear</FluentButton>
    </FluentToolbar>
</FluentHeader>
@if (btnLblSubsCst == "Unsubscribe")
{
    <FluentDataGrid Items="customers" ShowHover="true" ResizableColumns="true">
        <PropertyColumn Width="15%" Property="@(t => t.Id)" Title="Cust Id" Sortable="true" />
        <PropertyColumn Width="20%" Property="@(t => t.Name)" Title="Name" Sortable="true" />
        <PropertyColumn Width="30%" Property="@(t => t.Address)" Title="Address" Sortable="true" />
        <PropertyColumn Width="15%" Property="@(t => t.AccountNo)" Title="Account No" Sortable="true" />
        <PropertyColumn Width="20%" Property="@(t => t.RegisteredDate)" Title="Registered" Sortable="true" />
    </FluentDataGrid>
}

<FluentHeader Style="background-color:ButtonFace;color:ActiveBorder;margin-top:3em">
    Topic: TRANSFER >= 1m
    <FluentSpacer />
    <FluentToolbar Style="background-color: transparent">
        <FluentButton Appearance="Appearance.Accent" IconStart="@(btnLblSubsTrf1m.Length <= 9 ? subscribeIcon: unsubscribeIcon)" OnClick="SubscribeTrf1m">@btnLblSubsTrf1m</FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.Delete())" OnClick="ClearTrf1m">Clear</FluentButton>
    </FluentToolbar>
</FluentHeader>
@if (btnLblSubsTrf1m == "Unsubscribe")
{
    <FluentDataGrid Items="transfers1m" ShowHover="true" ResizableColumns="true">
        <PropertyColumn Width="20%" Property="@(t => t.BookedDate)" Title="Date" Sortable="true" />
        <PropertyColumn Width="25%" Property="@(t => t.Source)" Title="From account" Sortable="true" />
        <PropertyColumn Width="25%" Property="@(t => t.Target)" Title="To account" Sortable="true" />
        <PropertyColumn Width="10%" Property="@(t => t.Type)" Sortable="true" />
        <PropertyColumn Width="20%" Property="@(t => t.Amount)" Align="Align.End" Format="N0" Sortable="true" />
    </FluentDataGrid>
}

<FluentHeader Style="background-color:ButtonFace;color:ActiveBorder;margin-top:3em">
    Topic: CUSTOMER.TRANSFER >= 10m
    <FluentSpacer />
    <FluentToolbar Style="background-color: transparent">
        <FluentButton Appearance="Appearance.Accent" IconStart="@(btnLblSubsCstTrf.Length <= 9 ? subscribeIcon: unsubscribeIcon)" OnClick="SubscribeCstTrf">@btnLblSubsCstTrf</FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size24.Delete())" OnClick="ClearCstTrf">Clear</FluentButton>
    </FluentToolbar>
</FluentHeader>
@if (btnLblSubsCstTrf == "Unsubscribe")
{
    <FluentDataGrid Style="padding-bottom:3em" Items="customerTransfer" ShowHover="true" ResizableColumns="true">
        <PropertyColumn Width="15%" Property="@(t => t.Id)" Title="Cust Id" Sortable="true" />
        <PropertyColumn Width="20%" Property="@(t => t.Name)" Title="Name" Sortable="true" />
        <PropertyColumn Width="30%" Property="@(t => t.Address)" Title="Address" Sortable="true" />
        <PropertyColumn Width="15%" Property="@(t => t.AccountNo)" Title="Account No" Sortable="true" />
        <PropertyColumn Width="20%" Property="@(t => t.Amount)" Title="Transfer amount" Align="Align.End" Format="N0" Sortable="true" />
    </FluentDataGrid>
}
else
{
    <div style="padding-bottom:3em"></div>
}
@code {
    private JsonSerializerOptions options = new JsonSerializerOptions { WriteIndented = true };

    private IQueryable<Transfer> transfers = new List<Transfer>().AsQueryable();
    private IQueryable<Transfer> transfers1m = new List<Transfer>().AsQueryable();
    private IQueryable<CustomerTransfer> customerTransfer = new List<CustomerTransfer>().AsQueryable();
    private IQueryable<Customer> customers = new List<Customer>().AsQueryable();

    private string btnLblSubsTrf = "Subscribe";
    private string btnLblSubsTrf1m = "Subscribe";
    private string btnLblSubsCst = "Subscribe";
    private string btnLblSubsCstTrf = "Subscribe";

    [Inject]
    private IKafkaSubscription trfSubs { get; set; } = default!;
    [Inject]
    private IKafkaSubscription trf1mSubs { get; set; } = default!;
    [Inject]
    private IKafkaSubscription cstTrfSubs { get; set; } = default!;
    [Inject]
    private IKafkaSubscription cstSubs { get; set; } = default!;


    private Icon subscribeIcon = new Icons.Regular.Size24.Flash();
    private Icon unsubscribeIcon = new Icons.Regular.Size24.FlashOff();

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
    }

    private void ClearTrf()
    {
        transfers = new List<Transfer>().AsQueryable();
    }

    private void ClearTrf1m()
    {
        transfers1m = new List<Transfer>().AsQueryable();
    }

    private void ClearCstTrf()
    {
        customerTransfer = new List<CustomerTransfer>().AsQueryable();
    }

    private void ClearCst()
    {
        customers = new List<Customer>().AsQueryable();
    }


    private void SubscribeTrf()
    {
        if (btnLblSubsTrf == "Subscribe")
        {
            trfSubs.Run(GetTransfer, "TRANSFER");
            btnLblSubsTrf = "Unsubscribe";
        }
        else
        {
            trfSubs.Stop();
            btnLblSubsTrf = "Subscribe";
        }
    }

    private void SubscribeCstTrf()
    {
        if (btnLblSubsCstTrf == "Subscribe")
        {
            cstTrfSubs.Run(GetCustomerTransfer, "CUSTOMER.TRANSFER");
            btnLblSubsCstTrf = "Unsubscribe";
        }
        else
        {
            cstTrfSubs?.Stop();
            btnLblSubsCstTrf = "Subscribe";
        }
    }

    private void SubscribeTrf1m()
    {
        if (btnLblSubsTrf1m == "Subscribe")
        {
            trf1mSubs.Run(GetTransfer1m, "TRANSFER-1M-OR-MORE");
            btnLblSubsTrf1m = "Unsubscribe";
        }
        else
        {
            trf1mSubs?.Stop();
            btnLblSubsTrf1m = "Subscribe";
        }
    }

    private void SubscribeCst()
    {
        if (btnLblSubsCst == "Subscribe")
        {
            cstSubs.Run(GetCustomer, "CUSTOMERS");
            btnLblSubsCst = "Unsubscribe";
        }
        else
        {
            cstSubs?.Stop();
            btnLblSubsCst = "Subscribe";
        }
    }


    private void GetTransfer(string trData)
    {
        this.InvokeAsync(() =>
        {
            var trf = JsonSerializer.Deserialize<Transfer>(trData, options);
            if (trf != null)
            {
                var existing = transfers.ToList<Transfer>();
                existing.Add(trf);
                transfers = existing.AsQueryable();
                StateHasChanged();
            }
        });
    }

    private void GetCustomer(string trData)
    {
        this.InvokeAsync(() =>
        {
            var cst = JsonSerializer.Deserialize<Customer>(trData, options);
            if (cst != null)
            {
                var existing = customers.ToList<Customer>();
                existing.Add(cst);
                customers = existing.AsQueryable();
                StateHasChanged();
            }
        });
    }

    private void GetCustomerTransfer(string trData)
    {
        this.InvokeAsync(() =>
        {
            var csTrf = JsonSerializer.Deserialize<CustomerTransfer>(trData, options);
            if (csTrf != null)
            {
                var existing = customerTransfer.ToList<CustomerTransfer>();
                existing.Add(csTrf);
                customerTransfer = existing.AsQueryable();
                StateHasChanged();
            }
        });
    }

    private void GetTransfer1m(string trData)
    {
        this.InvokeAsync(() =>
        {
            var trf = JsonSerializer.Deserialize<Transfer>(trData, options);
            if (trf != null)
            {
                var existing = transfers1m.ToList<Transfer>();
                existing.Add(trf);
                transfers1m = existing.AsQueryable();
                StateHasChanged();
            }
        });
    }

    public async ValueTask DisposeAsync()
    {
        trfSubs.Stop();
        trf1mSubs.Stop();
        cstTrfSubs.Stop();
        cstSubs.Stop();
        await Task.CompletedTask;
    }
}
